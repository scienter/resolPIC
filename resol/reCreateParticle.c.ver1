#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "mesh.h"
#include "mpi.h"
#include "hdf5.h"
#include "hdf5_hl.h"

void deleteParticle(Particle ***particle,int i,int j,int k,int s);
void storeParticle(Particle ***particle,int i,int j,int k,int s,double *x2,double *w2,double *px2,double *py2,double *pz2,double dx,double minX);
void reCreateParticle1D(Domain *D,int i,int j,int k,int s);
void calInterpolation(double ***data,int numQ,double resolX);

void reCreateParticle(Domain D)
{
   int i,j,k,s,istart,iend,jstart,jend,kstart,kend;

   istart=D.istart;    iend=D.iend;
   jstart=D.jstart;    jend=D.jend;
   kstart=D.kstart;    kend=D.kend;

   switch (D.dimension)  {
   case 1 :
     j=k=0;
     for(i=istart; i<iend; i++)
       for(s=0; s<D.nSpecies; s++)  
         reCreateParticle1D(&D,i,j,k,s);
     break;
   }

}

void reCreateParticle1D(Domain *D,int i,int j,int k,int s)
{
   int l,m,n,cnt,totalCnt,index,numQ,flag,indexI;
   double minX,maxX,gapX,x0,W,x,px,py,pz,tmp2,dx,weight,targetW;
   double *xList,*xBound,*xBound1,***Q,***Px,***Py,***Pz;
   double px2[2],py2[2],pz2[2],x2[2],w2[2];
   size_t N,stride;
   Particle ***particle,***befoParticle,***nextParticle;
   particle=D->particle;
   befoParticle=D->befoParticle;
   nextParticle=D->nextParticle;
   ptclList *p;

   targetW=D->targetW;
   p=particle[i][j][k].head[s]->pt; totalCnt=0;
   while(p)  { totalCnt++; p=p->next; }
   cnt=(int)(1.0/targetW);

   xList=(double *)malloc(totalCnt*sizeof(double ));
   xBound1=(double *)malloc(cnt*sizeof(double ));

   index=0; p=particle[i][j][k].head[s]->pt;
   while(p)  { xList[index]=p->x; p=p->next; index++; }
   stride=1; N=totalCnt;
   gsl_sort(xList,stride,N);

   dx=targetW;
   index=0; minX=0.0;
   for(l=0; l<totalCnt-1; l++)  {
     maxX=(xList[l]+xList[l+1])*0.5;
     gapX=maxX-minX;
     if(gapX>dx)  {
       xBound1[index]=maxX;
       minX=maxX;
       index++;
     } else ;
   }

   xBound=(double *)malloc((index+2)*sizeof(double ));
   xBound[0]=0.0; xBound[index+1]=1.0;
   for(l=0; l<index; l++)
     xBound[l+1]=xBound1[l];

   numQ=index+1;
   Q=(double ***)malloc(numQ*sizeof(double **));
   Px=(double ***)malloc(numQ*sizeof(double **));
   Py=(double ***)malloc(numQ*sizeof(double **));
   Pz=(double ***)malloc(numQ*sizeof(double **));
   for(l=0; l<numQ; l++) {
     Q[l]=(double **)malloc(2*sizeof(double *));
     Px[l]=(double **)malloc(2*sizeof(double *));
     Py[l]=(double **)malloc(2*sizeof(double *));
     Pz[l]=(double **)malloc(2*sizeof(double *));
     for(m=0; m<2; m++) {
       Q[l][m]=(double *)malloc(3*sizeof(double *));
       Px[l][m]=(double *)malloc(3*sizeof(double *));
       Py[l][m]=(double *)malloc(3*sizeof(double *));
       Pz[l][m]=(double *)malloc(3*sizeof(double *));
     }
   }
   for(l=0; l<numQ; l++)
     for(m=0; m<2; m++)
       for(n=0; n<3; n++) {
         Q[l][m][n]=0.0; Px[l][m][n]=0.0;
         Py[l][m][n]=0.0; Pz[l][m][n]=0.0;
       }

   p=particle[i][j][k].head[s]->pt;
   minX=0.0; index=0;
   while(p)  {
     x=p->x;       weight=p->weight;
     indexI=0; flag=1;
     while(flag==1)  {
       if(x>=xBound[indexI] && x<xBound[indexI+1]) flag=0;
       else indexI++;
     }
     minX=xBound[indexI];  maxX=xBound[indexI+1];
     px=p->px;     py=p->py;         pz=p->pz;
     tmp2=weight/(maxX-minX);
     Q[indexI][0][1]+=(maxX-x)*tmp2;    
     Q[indexI][1][1]+=(x-minX)*tmp2;
     Px[indexI][0][1]+=(maxX-x)*tmp2*px; 
     Px[indexI][1][1]+=(x-minX)*tmp2*px;
     Py[indexI][0][1]+=(maxX-x)*tmp2*py;
     Py[indexI][1][1]+=(x-minX)*tmp2*py;
     Pz[indexI][0][1]+=(maxX-x)*tmp2*pz;
     Pz[indexI][1][1]+=(x-minX)*tmp2*pz;
     p=p->next;
   }
   deleteParticle(particle,i,j,k,s);
/*
   p=befoParticle[i][j][k].head[s]->pt;
   minX=0.0; index=0;
   while(p)  {
     x=p->x;       weight=p->weight;
     indexI=0; flag=1;
     while(flag==1)  {
       if(x>=xBound[indexI] && x<xBound[indexI+1]) flag=0;
       else indexI++;
     }
     minX=xBound[indexI];  maxX=xBound[indexI+1];
     px=p->px;     py=p->py;         pz=p->pz;
     tmp2=weight/(maxX-minX);
     Q[indexI][0][0]+=(maxX-x)*tmp2;    
     Q[indexI][1][0]+=(x-minX)*tmp2;
     Px[indexI][0][0]+=(maxX-x)*tmp2*px; 
     Px[indexI][1][0]+=(x-minX)*tmp2*px;
     Py[indexI][0][0]+=(maxX-x)*tmp2*py;
     Py[indexI][1][0]+=(x-minX)*tmp2*py;
     Pz[indexI][0][0]+=(maxX-x)*tmp2*pz;
     Pz[indexI][1][0]+=(x-minX)*tmp2*pz;
     p=p->next;
   }
   deleteParticle(befoParticle,i,j,k,s);

   p=nextParticle[i][j][k].head[s]->pt;
   minX=0.0; index=0;
   while(p)  {
     x=p->x;       weight=p->weight;
     indexI=0; flag=1;
     while(flag==1)  {
       if(x>=xBound[indexI] && x<xBound[indexI+1]) flag=0;
       else indexI++;
     }
     minX=xBound[indexI];  maxX=xBound[indexI+1];
     px=p->px;     py=p->py;         pz=p->pz;
     tmp2=weight/(maxX-minX);
     Q[indexI][0][2]+=(maxX-x)*tmp2;    
     Q[indexI][1][2]+=(x-minX)*tmp2;
     Px[indexI][0][2]+=(maxX-x)*tmp2*px; 
     Px[indexI][1][2]+=(x-minX)*tmp2*px;
     Py[indexI][0][2]+=(maxX-x)*tmp2*py;
     Py[indexI][1][2]+=(x-minX)*tmp2*py;
     Pz[indexI][0][2]+=(maxX-x)*tmp2*pz;
     Pz[indexI][1][2]+=(x-minX)*tmp2*pz;
     p=p->next;
   }
   deleteParticle(nextParticle,i,j,k,s);

   calInterpolation(Q,numQ,D->resolX);
   calInterpolation(Px,numQ,D->resolX);
   calInterpolation(Py,numQ,D->resolX);
   calInterpolation(Pz,numQ,D->resolX);
*/
   for(l=0; l<numQ; l++)  {
     W=Q[l][0][1]+Q[l][1][1];
     if(W>0)  {
       minX=xBound[l];     maxX=xBound[l+1];
       x0=Q[l][1][1]/W;       dx=maxX-minX;
       w2[0]=Q[l][0][1];      w2[1]=Q[l][1][1];
       x2[0]=x0*0.5;       x2[1]=(1.0+x0)*0.5;
       px2[0]=((Px[l][0][1]-Px[l][1][1])+(Px[l][0][1]+Px[l][1][1])*x0)/w2[0];
       py2[0]=((Py[l][0][1]-Py[l][1][1])+(Py[l][0][1]+Py[l][1][1])*x0)/w2[0];
       pz2[0]=((Pz[l][0][1]-Pz[l][1][1])+(Pz[l][0][1]+Pz[l][1][1])*x0)/w2[0];
       px2[1]=(2*Px[l][1][1]-(Px[l][0][1]+Px[l][1][1])*x0)/w2[1];
       py2[1]=(2*Py[l][1][1]-(Py[l][0][1]+Py[l][1][1])*x0)/w2[1];
       pz2[1]=(2*Pz[l][1][1]-(Pz[l][0][1]+Pz[l][1][1])*x0)/w2[1];
       storeParticle(particle,i,j,k,s,x2,w2,px2,py2,pz2,dx,minX);
     } else;
   }

   for(l=0; l<numQ; l++) {
     for(m=0; m<2; m++) {
       free(Q[l][m]);       free(Px[l][m]);
       free(Py[l][m]);      free(Pz[l][m]);
     }
     free(Q[l]);       free(Px[l]);
     free(Py[l]);      free(Pz[l]);
   }
   free(Q);
   free(Px);
   free(Py);
   free(Pz);
   free(xList);
   free(xBound);
   free(xBound1);
}

void calInterpolation(double ***data,int numQ,double resolX)
{
   int i,j;
   double y1,y2,y3,a,b,c,dx,x;

   for(i=0; i<numQ; i++)    {
     for(j=0; j<2; j++)       {
       y1=data[i][j][0];
       y2=data[i][j][1];
       y3=data[i][j][2];
       a=0.5*(y1+y3)-y2;
       b=2.0*y2-1.5*y1-0.5*y3;
       c=y1;
       dx=1.0/resolX;
       x=0.5+dx*0.5;
       data[i][j][1]=(a*x*x+b*x+c);
     }
   }
}

void deleteParticle(Particle ***particle,int i,int j,int k,int s)
{
  ptclList *p,*tmp;

  p=particle[i][j][k].head[s]->pt;
  while(p)  {
    tmp=p->next;
    particle[i][j][k].head[s]->pt=tmp;
    p->next=NULL;
    free(p);
    p=particle[i][j][k].head[s]->pt;
  }
/*
  p=D->befoParticle[i][j][k].head[s]->pt;
  while(p)  {
    tmp=p->next;
    D->befoParticle[i][j][k].head[s]->pt=tmp;
    p->next=NULL;
    free(p);
    p=D->befoParticle[i][j][k].head[s]->pt;
  }

  p=D->nextParticle[i][j][k].head[s]->pt;
  while(p)  {
    tmp=p->next;
    D->nextParticle[i][j][k].head[s]->pt=tmp;
    p->next=NULL;
    free(p);
    p=D->nextParticle[i][j][k].head[s]->pt;
  }
*/
}

void storeParticle(Particle ***particle,int i,int j,int k,int s,double *x2,double *w2,double *px2,double *py2,double *pz2,double dx,double minX)
{
  double x,weight;
  ptclList *new;

  new = (ptclList *)malloc(sizeof(ptclList ));
  new->next = particle[i][j][k].head[s]->pt;
  particle[i][j][k].head[s]->pt=new;

  x=minX+x2[0]*dx; weight=w2[0];
  new->x=x; new->weight=weight;
  new->px=px2[0]; new->py=py2[0]; new->pz=pz2[0];

  new = (ptclList *)malloc(sizeof(ptclList ));
  new->next = particle[i][j][k].head[s]->pt;
  particle[i][j][k].head[s]->pt=new;

  x=minX+x2[1]*dx; weight=w2[1];
  new->x=x; new->weight=weight;
  new->px=px2[1]; new->py=py2[1]; new->pz=pz2[1];
}
 
